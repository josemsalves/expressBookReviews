const express = require('express');
const axios = require('axios');  // Importando o Axios
let books = require("./booksdb.js");
const public_users = express.Router();

// Função para obter a lista de livros
const fetchBooks = async () => {
  try {
    // Simula uma chamada para uma API externa. 
    // Neste caso, usamos dados locais, mas você pode alterar a URL para uma API real.
    // Se você tivesse uma API real, você poderia fazer algo como:
    // const response = await axios.get('http://api.example.com/books');
    // return response.data;

    // Aqui retornamos os dados simulados
    return books;
  } catch (error) {
    console.error("Error fetching books:", error);
    throw error;
  }
};

// Get the book list available in the shop
public_users.get('/', async (req, res) => {
  try {
    const booksList = await fetchBooks();
    res.status(200).json(booksList);
  } catch (error) {
    res.status(500).json({ message: "Error fetching book list" });
  }
});

// Get book details based on ISBN
public_users.get('/isbn/:isbn', async (req, res) => {
  const { isbn } = req.params;
  try {
    const book = books[isbn];
    if (book) {
      res.status(200).json(book);
    } else {
      res.status(404).json({ message: "Book not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error fetching book details" });
  }
});

// Get book details based on author
public_users.get('/author/:author', async (req, res) => {
  const { author } = req.params;
  try {
    const result = {};
    for (let key in books) {
      if (books[key].author === author) {
        result[key] = books[key];
      }
    }
    if (Object.keys(result).length > 0) {
      res.status(200).json(result);
    } else {
      res.status(404).json({ message: "No books found by this author" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error fetching books by author" });
  }
});

// Get all books based on title
public_users.get('/title/:title', async (req, res) => {
  const { title } = req.params;
  try {
    const result = {};
    for (let key in books) {
      if (books[key].title.toLowerCase().includes(title.toLowerCase())) {
        result[key] = books[key];
      }
    }
    if (Object.keys(result).length > 0) {
      res.status(200).json(result);
    } else {
      res.status(404).json({ message: "No books found with this title" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error fetching books by title" });
  }
});

// Get book review
public_users.get('/review/:isbn', async (req, res) => {
  const { isbn } = req.params;
  try {
    const book = books[isbn];
    if (book && book.reviews) {
      res.status(200).json(book.reviews);
    } else if (book) {
      res.status(200).json({});
    } else {
      res.status(404).json({ message: "Book not found" });
    }
  } catch (error) {
    res.status(500).json({ message: "Error fetching book reviews" });
  }
});

module.exports.general = public_users;